name: Build Manim For Windows

on:
  push:
    branches: [ master, release-*]

jobs:
  build_3_8_3:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: set-env
      uses: allenevans/set-env@v1.1.0
      with:
        PYVER: "3.8.3"
        PYDIR: Python38
    - name: Install dependencies
      run: |
        curl -L https://aka.ms/nugetclidl -o nuget.exe
        git clone https://github.com/ManimCommunity/manim.git
        nuget install pythonx86 -Version $env:PYVER -OutputDirectory python.$env:PYVER.x86
        cd python.$env:PYVER.x86 && cp -r ../manim manim && cd ../
        nuget install python -Version $env:PYVER -OutputDirectory python.$env:PYVER.x64
        cd python.$env:PYVER.x64 && mv ../manim manim && cd ../
        curl -L https://downloads.sourceforge.net/project/nsis/NSIS%203/3.05/nsis-3.05-setup.exe -o nsisinstaller.exe
        ./nsisinstaller.exe /S /D=C:\NSIS
        $env:Path += ";" + "C:\NSIS"
        echo "::set-env name=Path::$env:Path"
        cmd.exe //c "RefreshEnv.cmd"
    - name: Build 64 binaries
      run: |
        cd python.$env:PYVER.x64
        ../python-x64.bat
        dir manim/
        cd ../
        cd python.$env:PYVER.x86
        ../python-x86.bat
        dir manim/
        cd ../
        makensis makeexe64.nsi
        makensis makeexe86.nsi
    - name: Test Generated Files
      run: |
        ./Manim_1.0x64.exe /S /INSTDIR=C:\Manim
        ./Manim_1.0x86.exe /S /INSTDIR=C:\Manim
        Test-Path C:\Manim
        Test-Path $env:APPDATA\Manim
        Test-Path $env:PROGRAMFILES\Manim
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false
    - name: Upload Release Asset x64
      id: upload-release-assetx64 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Manim_1.0x64.exe
        asset_name: Manim_1.0x64.exe
        asset_content_type: application/exe
    - name: Upload Release Asset x86
      id: upload-release-assetx86 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./Manim_1.0x86.exe
        asset_name: Manim_1.0x86.exe
        asset_content_type: application/exe
